using Rampastring.Updater;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VersionWriter
{
    class VersionConfig
    {
        private const string VERSION_SECTION = "Version";
        private const string VERSIONCONFIG_INI = "VersionConfig.ini";

        /// <summary>
        /// The internal version number of the product build.
        /// </summary>
        public int InternalVersion { get; set; }

        /// <summary>
        /// The version string of the product build for the UI.
        /// </summary>
        public string DisplayedVersion { get; set; }

        public List<FileEntry> FileEntries = new List<FileEntry>();

        public void Parse()
        {
            var versionConfigIni = new IniFile(GetVersionConfigIniPath());

            InternalVersion = versionConfigIni.GetIntValue(VERSION_SECTION, "InternalVersion", 0);
            DisplayedVersion = versionConfigIni.GetStringValue(VERSION_SECTION, "DisplayString", InternalVersion.ToString());

            IniSection filesSection = versionConfigIni.GetSection("Files");
            List<string> keys = filesSection.GetKeys();

            foreach (string key in keys)
            {
                string entryInfo = filesSection.GetStringValue(key, string.Empty);
                FileEntry entry = FileEntry.Parse(entryInfo);
                FileEntries.Add(entry);
            }
        }

        public void GenerateVersionDisplayStringFromCurrentTime()
        {
            var dtn = DateTime.Now;
            DisplayedVersion = dtn.ToString("dd.MM_") + InternalVersion.ToString();
        }

        public void Write()
        {
            IniFile versionConfigIni = new IniFile();
            versionConfigIni.SetIntValue(VERSION_SECTION, "InternalVersion", InternalVersion);
            versionConfigIni.SetStringValue(VERSION_SECTION, "DisplayedVersion", DisplayedVersion);

            for (int i = 0; i < FileEntries.Count; i++)
            {
                versionConfigIni.SetStringValue("Files", i.ToString(), FileEntries[i].ToString());
            }

            versionConfigIni.WriteIniFile(GetVersionConfigIniPath());

            using (StreamWriter sw = new StreamWriter(File.OpenWrite(GetVersionConfigIniPath())))
            {
                sw.WriteLine("; Generated by VersionWriter of Rampastring.Updater");
                sw.WriteLine("; All comments have been truncated and will be truncated when the tool is run.");
                sw.WriteLine();
            }
        }

        private string GetVersionConfigIniPath()
        {
            return Environment.CurrentDirectory + 
                Path.DirectorySeparatorChar + VERSIONCONFIG_INI;
        }
    }
}
